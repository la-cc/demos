apiVersion: v1
items:
- apiVersion: argoproj.io/v1alpha1
  kind: ClusterWorkflowTemplate
  metadata:
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "15"
    labels:
      app.kubernetes.io/instance: build-plane
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: openchoreo-build-plane
      app.kubernetes.io/part-of: openchoreo
      app.kubernetes.io/version: v0.3.2
      helm.sh/chart: openchoreo-build-plane-0.3.2
    name: ballerina-buildpack
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: openchoreo.dev/noderole
              operator: In
              values:
              - workflow-runner
    entrypoint: build-workflow
    templates:
    - name: build-workflow
      steps:
      - - name: clone-step
          template: clone-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: build-step
          template: build-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: push-step
          template: push-step
      - - arguments:
            parameters:
            - name: image
              value: '{{steps.push-step.outputs.parameters.image}}'
          name: workload-create-step
          template: workload-create-step
    - container:
        args:
        - |-
          set -e

          BRANCH={{workflow.parameters.branch}}
          REPO={{workflow.parameters.git-repo}}
          COMMIT={{workflow.parameters.commit}}

          if [[ -n "$COMMIT" ]]; then
              echo "Cloning specific commit: $COMMIT"
              git clone --no-checkout --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              git config --global advice.detachedHead false
              git fetch --depth 1 origin "$COMMIT"
              git checkout "$COMMIT"
              echo -n "$COMMIT" | cut -c1-8 > /tmp/git-revision.txt
          else
              echo "Cloning branch: $BRANCH with latest commit"
              git clone --single-branch --branch $BRANCH --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              COMMIT_SHA=$(git rev-parse HEAD)
              echo -n "$COMMIT_SHA" | cut -c1-8 > /tmp/git-revision.txt
          fi
        command:
        - sh
        - -c
        image: alpine/git
        name: ""
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      name: clone-step
      outputs:
        parameters:
        - name: git-revision
          valueFrom:
            path: /tmp/git-revision.txt
    - container:
        args:
        - |-
          set -e

          WORKDIR=/mnt/vol/source
          CACHE_DIR=/shared/podman/cache

          IMAGE="{{workflow.parameters.image-name}}:{{workflow.parameters.image-tag}}-{{inputs.parameters.git-revision}}"
          APP_PATH="{{workflow.parameters.app-path}}"

          BUILDER="ghcr.io/openchoreo/buildpack/ballerina:18"
          RUN_IMAGE="ghcr.io/openchoreo/buildpack/ballerina:18-run"

          #####################################################################
          # 1. Podman daemon + storage.conf
          #####################################################################
          mkdir -p /etc/containers
          cat > /etc/containers/storage.conf <<EOF
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          podman system service --time=0 &
          until podman info --format '{{.Host.RemoteSocket.Exists}}' 2>/dev/null | grep -q true; do sleep 1; done

          #####################################################################
          # 2. Cache builder/run images
          #####################################################################
          ensure_cached () {
            local image=$1 tar=$2
            if [[ ! -f "$tar" ]]; then
              podman pull "$image"
              podman save -o "$tar" "$image"
            else
              podman load -i "$tar" 2>/dev/null || {
                podman pull "$image"
                podman save -o "$tar" "$image"
              }
            fi
          }

          #####################################################################
          # 3. Build with Ballerina Buildpacks
          #####################################################################
          ensure_cached "$BUILDER" "$CACHE_DIR/ballerina-builder.tar"
          ensure_cached "$RUN_IMAGE" "$CACHE_DIR/ballerina-run.tar"

          /usr/local/bin/pack build "$IMAGE" \
            --builder "$BUILDER" \
            --docker-host inherit \
            --path "$WORKDIR/$APP_PATH" \
            --volume "/mnt/vol:/app/generated-artifacts:rw" \
            --pull-policy if-not-present

          podman save -o /mnt/vol/app-image.tar "$IMAGE"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
        - mountPath: /shared/podman/cache
          name: podman-cache
      inputs:
        parameters:
        - name: git-revision
      name: build-step
    - container:
        args:
        - |-
          set -e
          #####################################################################
          # 1. Inputs
          #####################################################################
          GIT_REVISION={{inputs.parameters.git-revision}}
          IMAGE_NAME={{workflow.parameters.image-name}}
          IMAGE_TAG={{workflow.parameters.image-tag}}
          SRC_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}-${GIT_REVISION}"

          #####################################################################
          # 2. Registry endpoints from Helm values
          #    - type: "local" or "external"
          #    - choose the right push/pull endpoints
          #####################################################################
          REGISTRY_TYPE="local"

          if [ "${REGISTRY_TYPE}" = "local" ]; then
            REGISTRY_PULL="localhost:30003"
            REGISTRY_PUSH="registry.openchoreo-data-plane:5000"
          else
            REGISTRY_PULL=""
            REGISTRY_PUSH=""
          fi

          #####################################################################
          # 3. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 4. Load the tarred image and push to the selected registry
          #####################################################################
          podman load -i /mnt/vol/app-image.tar

          podman tag $SRC_IMAGE $REGISTRY_PUSH/$SRC_IMAGE
          podman push --tls-verify=false $REGISTRY_PUSH/$SRC_IMAGE

          #####################################################################
          # 5. Emit image reference (for later steps/kubelet pulls)
          #####################################################################
          echo -n "$REGISTRY_PULL/$SRC_IMAGE" > /tmp/image.txt
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: git-revision
      name: push-step
      outputs:
        parameters:
        - name: image
          valueFrom:
            path: /tmp/image.txt
    - container:
        args:
        - |-
          set -e

          #####################################################################
          # 1. Initialize variables
          #####################################################################
          IMAGE={{inputs.parameters.image}}
          PROJECT_NAME={{workflow.parameters.project-name}}
          COMPONENT_NAME={{workflow.parameters.component-name}}
          APP_PATH="{{workflow.parameters.app-path}}"

          DESCRIPTOR_PATH="/mnt/vol/source${APP_PATH:+/${APP_PATH#/}}"

          OUTPUT_PATH="/mnt/vol/workload-cr.yaml"

          echo "Creating workload with image: ${IMAGE}"
          echo "Using descriptor in: ${DESCRIPTOR_PATH}"

          #####################################################################
          # 2. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 3. Create workload CR and export to output
          #####################################################################
          podman run --rm --network=none \
          -v $DESCRIPTOR_PATH:/app:rw -w /app \
          ghcr.io/openchoreo/openchoreo-cli:v0.3.2 \
            create workload \
            --project "${PROJECT_NAME}" \
            --component "${COMPONENT_NAME}" \
            --image "${IMAGE}" \
            --descriptor "workload.yaml" \
            -o "workload-cr.yaml"

          # Copy output CR to the shared volume
          cp -f "${DESCRIPTOR_PATH}/workload-cr.yaml" "${OUTPUT_PATH}"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: image
      name: workload-create-step
      outputs:
        parameters:
        - name: workload-cr
          valueFrom:
            path: /mnt/vol/workload-cr.yaml
    ttlStrategy:
      secondsAfterFailure: 3600
      secondsAfterSuccess: 3600
    volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
    volumes:
    - hostPath:
        path: /shared/podman/cache
        type: DirectoryOrCreate
      name: podman-cache
- apiVersion: argoproj.io/v1alpha1
  kind: ClusterWorkflowTemplate
  metadata:
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "15"
    labels:
      app.kubernetes.io/instance: build-plane
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: openchoreo-build-plane
      app.kubernetes.io/part-of: openchoreo
      app.kubernetes.io/version: v0.3.2
      helm.sh/chart: openchoreo-build-plane-0.3.2
    name: docker
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: openchoreo.dev/noderole
              operator: In
              values:
              - workflow-runner
    arguments:
      parameters:
      - name: docker-context
      - name: dockerfile-path
    entrypoint: build-workflow
    templates:
    - name: build-workflow
      steps:
      - - name: clone-step
          template: clone-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: build-step
          template: build-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: push-step
          template: push-step
      - - arguments:
            parameters:
            - name: image
              value: '{{steps.push-step.outputs.parameters.image}}'
          name: workload-create-step
          template: workload-create-step
    - container:
        args:
        - |-
          set -e

          BRANCH={{workflow.parameters.branch}}
          REPO={{workflow.parameters.git-repo}}
          COMMIT={{workflow.parameters.commit}}

          if [[ -n "$COMMIT" ]]; then
              echo "Cloning specific commit: $COMMIT"
              git clone --no-checkout --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              git config --global advice.detachedHead false
              git fetch --depth 1 origin "$COMMIT"
              git checkout "$COMMIT"
              echo -n "$COMMIT" | cut -c1-8 > /tmp/git-revision.txt
          else
              echo "Cloning branch: $BRANCH with latest commit"
              git clone --single-branch --branch $BRANCH --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              COMMIT_SHA=$(git rev-parse HEAD)
              echo -n "$COMMIT_SHA" | cut -c1-8 > /tmp/git-revision.txt
          fi
        command:
        - sh
        - -c
        image: alpine/git
        name: ""
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      name: clone-step
      outputs:
        parameters:
        - name: git-revision
          valueFrom:
            path: /tmp/git-revision.txt
    - container:
        args:
        - |-
          set -e

          WORKDIR=/mnt/vol/source
          IMAGE="{{workflow.parameters.image-name}}:{{workflow.parameters.image-tag}}-{{inputs.parameters.git-revision}}"
          DOCKER_CONTEXT="{{workflow.parameters.docker-context}}"
          DOCKERFILE_PATH="{{workflow.parameters.dockerfile-path}}"

          #####################################################################
          # 1.  Podman daemon + storage.conf
          #####################################################################
          mkdir -p /etc/containers
          cat > /etc/containers/storage.conf <<EOF
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 2.  Docker Build
          #####################################################################
          podman build -t $IMAGE -f $WORKDIR/$DOCKERFILE_PATH $WORKDIR/$DOCKER_CONTEXT
          podman save -o /mnt/vol/app-image.tar $IMAGE
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
        - mountPath: /shared/podman/cache
          name: podman-cache
      inputs:
        parameters:
        - name: git-revision
      name: build-step
    - container:
        args:
        - |-
          set -e
          #####################################################################
          # 1. Inputs
          #####################################################################
          GIT_REVISION={{inputs.parameters.git-revision}}
          IMAGE_NAME={{workflow.parameters.image-name}}
          IMAGE_TAG={{workflow.parameters.image-tag}}
          SRC_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}-${GIT_REVISION}"

          #####################################################################
          # 2. Registry endpoints from Helm values
          #    - type: "local" or "external"
          #    - choose the right push/pull endpoints
          #####################################################################
          REGISTRY_TYPE="local"

          if [ "${REGISTRY_TYPE}" = "local" ]; then
            REGISTRY_PULL="localhost:30003"
            REGISTRY_PUSH="registry.openchoreo-data-plane:5000"
          else
            REGISTRY_PULL=""
            REGISTRY_PUSH=""
          fi

          #####################################################################
          # 3. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 4. Load the tarred image and push to the selected registry
          #####################################################################
          podman load -i /mnt/vol/app-image.tar

          podman tag $SRC_IMAGE $REGISTRY_PUSH/$SRC_IMAGE
          podman push --tls-verify=false $REGISTRY_PUSH/$SRC_IMAGE

          #####################################################################
          # 5. Emit image reference (for later steps/kubelet pulls)
          #####################################################################
          echo -n "$REGISTRY_PULL/$SRC_IMAGE" > /tmp/image.txt
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: git-revision
      name: push-step
      outputs:
        parameters:
        - name: image
          valueFrom:
            path: /tmp/image.txt
    - container:
        args:
        - |-
          set -e

          #####################################################################
          # 1. Initialize variables
          #####################################################################
          IMAGE={{inputs.parameters.image}}
          PROJECT_NAME={{workflow.parameters.project-name}}
          COMPONENT_NAME={{workflow.parameters.component-name}}
          APP_PATH="{{workflow.parameters.app-path}}"

          DESCRIPTOR_PATH="/mnt/vol/source${APP_PATH:+/${APP_PATH#/}}"

          OUTPUT_PATH="/mnt/vol/workload-cr.yaml"

          echo "Creating workload with image: ${IMAGE}"
          echo "Using descriptor in: ${DESCRIPTOR_PATH}"

          #####################################################################
          # 2. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 3. Create workload CR and export to output
          #####################################################################
          podman run --rm --network=none \
          -v $DESCRIPTOR_PATH:/app:rw -w /app \
          ghcr.io/openchoreo/openchoreo-cli:v0.3.2 \
            create workload \
            --project "${PROJECT_NAME}" \
            --component "${COMPONENT_NAME}" \
            --image "${IMAGE}" \
            --descriptor "workload.yaml" \
            -o "workload-cr.yaml"

          # Copy output CR to the shared volume
          cp -f "${DESCRIPTOR_PATH}/workload-cr.yaml" "${OUTPUT_PATH}"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: image
      name: workload-create-step
      outputs:
        parameters:
        - name: workload-cr
          valueFrom:
            path: /mnt/vol/workload-cr.yaml
    ttlStrategy:
      secondsAfterFailure: 3600
      secondsAfterSuccess: 3600
    volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
    volumes:
    - hostPath:
        path: /shared/podman/cache
        type: DirectoryOrCreate
      name: podman-cache
- apiVersion: argoproj.io/v1alpha1
  kind: ClusterWorkflowTemplate
  metadata:
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "15"
    labels:
      app.kubernetes.io/instance: build-plane
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: openchoreo-build-plane
      app.kubernetes.io/part-of: openchoreo
      app.kubernetes.io/version: v0.3.2
      helm.sh/chart: openchoreo-build-plane-0.3.2
    name: google-cloud-buildpacks
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: openchoreo.dev/noderole
              operator: In
              values:
              - workflow-runner
    entrypoint: build-workflow
    templates:
    - name: build-workflow
      steps:
      - - name: clone-step
          template: clone-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: build-step
          template: build-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: push-step
          template: push-step
      - - arguments:
            parameters:
            - name: image
              value: '{{steps.push-step.outputs.parameters.image}}'
          name: workload-create-step
          template: workload-create-step
    - container:
        args:
        - |-
          set -e

          BRANCH={{workflow.parameters.branch}}
          REPO={{workflow.parameters.git-repo}}
          COMMIT={{workflow.parameters.commit}}

          if [[ -n "$COMMIT" ]]; then
              echo "Cloning specific commit: $COMMIT"
              git clone --no-checkout --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              git config --global advice.detachedHead false
              git fetch --depth 1 origin "$COMMIT"
              git checkout "$COMMIT"
              echo -n "$COMMIT" | cut -c1-8 > /tmp/git-revision.txt
          else
              echo "Cloning branch: $BRANCH with latest commit"
              git clone --single-branch --branch $BRANCH --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              COMMIT_SHA=$(git rev-parse HEAD)
              echo -n "$COMMIT_SHA" | cut -c1-8 > /tmp/git-revision.txt
          fi
        command:
        - sh
        - -c
        image: alpine/git
        name: ""
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      name: clone-step
      outputs:
        parameters:
        - name: git-revision
          valueFrom:
            path: /tmp/git-revision.txt
    - container:
        args:
        - |-
          set -e

          WORKDIR=/mnt/vol/source
          CACHE_DIR=/shared/podman/cache

          IMAGE="{{workflow.parameters.image-name}}:{{workflow.parameters.image-tag}}-{{inputs.parameters.git-revision}}"
          APP_PATH="{{workflow.parameters.app-path}}"

          BUILDER="gcr.io/buildpacks/builder@sha256:5977b4bd47d3e9ff729eefe9eb99d321d4bba7aa3b14986323133f40b622aef1"
          RUN_IMG="gcr.io/buildpacks/google-22/run:latest"

          #####################################################################
          # 1. Podman daemon + storage.conf
          #####################################################################
          mkdir -p /etc/containers
          cat > /etc/containers/storage.conf <<EOF
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          podman system service --time=0 &
          until podman info --format '{{.Host.RemoteSocket.Exists}}' 2>/dev/null | grep -q true; do sleep 1; done

          #####################################################################
          # 2. Cache builder/run images
          #####################################################################
          ensure_cached () {
            local image=$1 tar=$2
            if [[ ! -f "$tar" ]]; then
              podman pull "$image"
              podman save -o "$tar" "$image"
            else
              podman load -i "$tar" 2>/dev/null || {
                podman pull "$image"
                podman save -o "$tar" "$image"
              }
            fi
          }

          #####################################################################
          # 3. Build with Google Buildpacks
          #####################################################################
          ensure_cached "$BUILDER" "$CACHE_DIR/google-builder.tar"
          ensure_cached "$RUN_IMG" "$CACHE_DIR/google-run.tar"

          /usr/local/bin/pack build "$IMAGE" \
            --builder "$BUILDER" \
            --docker-host inherit \
            --path "$WORKDIR/$APP_PATH" \
            --pull-policy if-not-present

          podman save -o /mnt/vol/app-image.tar "$IMAGE"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
        - mountPath: /shared/podman/cache
          name: podman-cache
      inputs:
        parameters:
        - name: git-revision
      name: build-step
    - container:
        args:
        - |-
          set -e

          #####################################################################
          # 1. Inputs
          #####################################################################
          GIT_REVISION={{inputs.parameters.git-revision}}
          IMAGE_NAME={{workflow.parameters.image-name}}
          IMAGE_TAG={{workflow.parameters.image-tag}}
          SRC_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}-${GIT_REVISION}"

          #####################################################################
          # 2. Registry endpoints from Helm values
          #    - type: "local" or "external"
          #    - choose the right push/pull endpoints
          #####################################################################
          REGISTRY_TYPE="local"

          if [ "${REGISTRY_TYPE}" = "local" ]; then
            REGISTRY_PULL="localhost:30003"
            REGISTRY_PUSH="registry.openchoreo-data-plane:5000"
          else
            REGISTRY_PULL=""
            REGISTRY_PUSH=""
          fi

          #####################################################################
          # 3. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 4. Load the tarred image and push to the selected registry
          #####################################################################
          podman load -i /mnt/vol/app-image.tar

          podman tag $SRC_IMAGE $REGISTRY_PUSH/$SRC_IMAGE
          podman push --tls-verify=false $REGISTRY_PUSH/$SRC_IMAGE

          #####################################################################
          # 5. Emit image reference (for later steps/kubelet pulls)
          #####################################################################
          echo -n "$REGISTRY_PULL/$SRC_IMAGE" > /tmp/image.txt
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: git-revision
      name: push-step
      outputs:
        parameters:
        - name: image
          valueFrom:
            path: /tmp/image.txt
    - container:
        args:
        - |-
          set -e

          #####################################################################
          # 1. Initialize variables
          #####################################################################
          IMAGE={{inputs.parameters.image}}
          PROJECT_NAME={{workflow.parameters.project-name}}
          COMPONENT_NAME={{workflow.parameters.component-name}}
          APP_PATH="{{workflow.parameters.app-path}}"

          DESCRIPTOR_PATH="/mnt/vol/source${APP_PATH:+/${APP_PATH#/}}"

          OUTPUT_PATH="/mnt/vol/workload-cr.yaml"

          echo "Creating workload with image: ${IMAGE}"
          echo "Using descriptor in: ${DESCRIPTOR_PATH}"

          #####################################################################
          # 2. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 3. Create workload CR and export to output
          #####################################################################
          podman run --rm --network=none \
          -v $DESCRIPTOR_PATH:/app:rw -w /app \
          ghcr.io/openchoreo/openchoreo-cli:v0.3.2 \
            create workload \
            --project "${PROJECT_NAME}" \
            --component "${COMPONENT_NAME}" \
            --image "${IMAGE}" \
            --descriptor "workload.yaml" \
            -o "workload-cr.yaml"

          # Copy output CR to the shared volume
          cp -f "${DESCRIPTOR_PATH}/workload-cr.yaml" "${OUTPUT_PATH}"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: image
      name: workload-create-step
      outputs:
        parameters:
        - name: workload-cr
          valueFrom:
            path: /mnt/vol/workload-cr.yaml
    ttlStrategy:
      secondsAfterFailure: 3600
      secondsAfterSuccess: 3600
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: workspace
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
    volumes:
    - hostPath:
        path: /shared/podman/cache
        type: DirectoryOrCreate
      name: podman-cache
- apiVersion: argoproj.io/v1alpha1
  kind: ClusterWorkflowTemplate
  metadata:
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "15"
    labels:
      app.kubernetes.io/instance: build-plane
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: openchoreo-build-plane
      app.kubernetes.io/part-of: openchoreo
      app.kubernetes.io/version: v0.3.2
      helm.sh/chart: openchoreo-build-plane-0.3.2
    name: react
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: openchoreo.dev/noderole
              operator: In
              values:
              - workflow-runner
    arguments:
      parameters:
      - name: node-version
    entrypoint: build-workflow
    templates:
    - name: build-workflow
      steps:
      - - name: clone-step
          template: clone-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: build-step
          template: build-step
      - - arguments:
            parameters:
            - name: git-revision
              value: '{{steps.clone-step.outputs.parameters.git-revision}}'
          name: push-step
          template: push-step
      - - arguments:
            parameters:
            - name: image
              value: '{{steps.push-step.outputs.parameters.image}}'
          name: workload-create-step
          template: workload-create-step
    - container:
        args:
        - |-
          set -e

          BRANCH={{workflow.parameters.branch}}
          REPO={{workflow.parameters.git-repo}}
          COMMIT={{workflow.parameters.commit}}

          if [[ -n "$COMMIT" ]]; then
              echo "Cloning specific commit: $COMMIT"
              git clone --no-checkout --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              git config --global advice.detachedHead false
              git fetch --depth 1 origin "$COMMIT"
              git checkout "$COMMIT"
              echo -n "$COMMIT" | cut -c1-8 > /tmp/git-revision.txt
          else
              echo "Cloning branch: $BRANCH with latest commit"
              git clone --single-branch --branch $BRANCH --depth 1 "$REPO" /mnt/vol/source
              cd /mnt/vol/source
              COMMIT_SHA=$(git rev-parse HEAD)
              echo -n "$COMMIT_SHA" | cut -c1-8 > /tmp/git-revision.txt
          fi
        command:
        - sh
        - -c
        image: alpine/git
        name: ""
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      name: clone-step
      outputs:
        parameters:
        - name: git-revision
          valueFrom:
            path: /tmp/git-revision.txt
    - container:
        args:
        - |-
          set -e

          WORKDIR="/mnt/vol/source"
          CACHE_DIR="/shared/podman/cache"

          IMAGE="{{workflow.parameters.image-name}}:{{workflow.parameters.image-tag}}-{{inputs.parameters.git-revision}}"
          APP_PATH="{{workflow.parameters.app-path}}"
          NODE_VERSION="{{workflow.parameters.node-version}}"

          #####################################################################
          # 1. Prepare workspace and locate source
          #####################################################################
          cd "${WORKDIR}"

          # Remove leading slash from APP_PATH if present
          APP_PATH_CLEAN=$(echo "$APP_PATH" | sed 's|^/||')

          # Determine source directory - if APP_PATH is specified, use it, otherwise use current directory
          if [ -n "$APP_PATH_CLEAN" ] && [ -d "$APP_PATH_CLEAN" ]; then
              SOURCE_DIR="$APP_PATH_CLEAN"
          else
              SOURCE_DIR="."
          fi

          echo "Building from source directory: $SOURCE_DIR"
          #####################################################################
          # 2. Build React: Custom Dockerfile + Nginx
          #####################################################################
          cat > "${SOURCE_DIR}/Dockerfile" <<EOF
          FROM node:${NODE_VERSION}-alpine AS builder
          RUN npm install -g pnpm
          WORKDIR /app
          COPY . .
          RUN if [ -f "package-lock.json" ]; then npm ci; \\
              elif [ -f "yarn.lock" ]; then yarn install --frozen-lockfile; \\
              elif [ -f "pnpm-lock.yaml" ]; then pnpm install --frozen-lockfile; \\
              else echo "No lock file found" && exit 1; fi
          RUN npm run build || yarn run build || pnpm run build

          FROM nginx:alpine
          COPY --from=builder /app/default.conf /etc/nginx/conf.d/default.conf
          COPY --from=builder /app/build /usr/share/nginx/html/
          EOF

          cat > "${SOURCE_DIR}/default.conf" <<'EOF'
          server {
            listen 80;
            location / {
              root   /usr/share/nginx/html;
              index  index.html;
              try_files $uri /index.html;
            }
          }
          EOF

          podman build -t "$IMAGE" -f "${SOURCE_DIR}/Dockerfile" "$SOURCE_DIR"
          podman save -o /mnt/vol/app-image.tar "$IMAGE"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
        - mountPath: /shared/podman/cache
          name: podman-cache
      inputs:
        parameters:
        - name: git-revision
      name: build-step
    - container:
        args:
        - |-
          set -e

          #####################################################################
          # 1. Inputs
          #####################################################################
          GIT_REVISION={{inputs.parameters.git-revision}}
          IMAGE_NAME={{workflow.parameters.image-name}}
          IMAGE_TAG={{workflow.parameters.image-tag}}
          SRC_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}-${GIT_REVISION}"

          #####################################################################
          # 2. Registry endpoints from Helm values
          #    - type: "local" or "external"
          #    - choose the right push/pull endpoints
          #####################################################################
          REGISTRY_TYPE="local"

          if [ "${REGISTRY_TYPE}" = "local" ]; then
            REGISTRY_PULL="localhost:30003"
            REGISTRY_PUSH="registry.openchoreo-data-plane:5000"
          else
            REGISTRY_PULL=""
            REGISTRY_PUSH=""
          fi

          #####################################################################
          # 3. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 4. Load the tarred image and push to the selected registry
          #####################################################################
          podman load -i /mnt/vol/app-image.tar

          podman tag $SRC_IMAGE $REGISTRY_PUSH/$SRC_IMAGE
          podman push --tls-verify=false $REGISTRY_PUSH/$SRC_IMAGE

          #####################################################################
          # 5. Emit image reference (for later steps/kubelet pulls)
          #####################################################################
          echo -n "$REGISTRY_PULL/$SRC_IMAGE" > /tmp/image.txt
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: git-revision
      name: push-step
      outputs:
        parameters:
        - name: image
          valueFrom:
            path: /tmp/image.txt
    - container:
        args:
        - |-
          set -e

          #####################################################################
          # 1. Initialize variables
          #####################################################################
          IMAGE={{inputs.parameters.image}}
          PROJECT_NAME={{workflow.parameters.project-name}}
          COMPONENT_NAME={{workflow.parameters.component-name}}
          APP_PATH="{{workflow.parameters.app-path}}"

          DESCRIPTOR_PATH="/mnt/vol/source${APP_PATH:+/${APP_PATH#/}}"

          OUTPUT_PATH="/mnt/vol/workload-cr.yaml"

          echo "Creating workload with image: ${IMAGE}"
          echo "Using descriptor in: ${DESCRIPTOR_PATH}"

          #####################################################################
          # 2. Podman storage configuration
          #####################################################################
          mkdir -p /etc/containers
          cat <<EOF > /etc/containers/storage.conf
          [storage]
          driver = "overlay"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"
          [storage.options.overlay]
          mount_program = "/usr/bin/fuse-overlayfs"
          EOF

          #####################################################################
          # 3. Create workload CR and export to output
          #####################################################################
          podman run --rm --network=none \
          -v $DESCRIPTOR_PATH:/app:rw -w /app \
          ghcr.io/openchoreo/openchoreo-cli:v0.3.2 \
            create workload \
            --project "${PROJECT_NAME}" \
            --component "${COMPONENT_NAME}" \
            --image "${IMAGE}" \
            --descriptor "workload.yaml" \
            -o "workload-cr.yaml"

          # Copy output CR to the shared volume
          cp -f "${DESCRIPTOR_PATH}/workload-cr.yaml" "${OUTPUT_PATH}"
        command:
        - sh
        - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/vol
          name: workspace
      inputs:
        parameters:
        - name: image
      name: workload-create-step
      outputs:
        parameters:
        - name: workload-cr
          valueFrom:
            path: /mnt/vol/workload-cr.yaml
    ttlStrategy:
      secondsAfterFailure: 3600
      secondsAfterSuccess: 3600
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: workspace
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
    volumes:
    - hostPath:
        path: /shared/podman/cache
        type: DirectoryOrCreate
      name: podman-cache
kind: List
metadata:
  resourceVersion: ""
